# Read photo from local drive, create thumbnail, write thumbnail to photos database table.
# Query the photos database table to get photo data and display it

# Currently, the psycopg is the most popular PostgreSQL database adapter for the Python language. 
# Use Anaconda to install both psycopg2 and psychpg2-binary to get the needed DLLs

# psycopg2 converts PostgreSQL bytea to Python memoryview when queried. You can then convert memoryview to a bytestring using tobytes(). 
# The bytestring can then be converted back to an Image using frombytes().

# https://wiki.postgresql.org/wiki/BinaryFilesInDB

from PIL import Image
import psycopg2
import yaml
from pathlib import Path

def db_conn():
    # Example yaml file format
    # postgresql:
        # dbname: dbname
        # user: username
        # password: pw
        # host: hostname
        # port: !!str portnum # Force the integer to be a string since that is what is needed in the connection string

    with open("postgresql_connect.yaml", mode="r", encoding="utf-8") as file:
        d = yaml.safe_load(file)['postgresql']

    try: 
        conn = psycopg2.connect(dbname=d['dbname'], user=d['user'], password=d['password'] , host=d['host'] , port=d['port'] )
    except psycopg2.Error as err:
        conn = None
        print(err)
    finally:
        return conn

def create_photos_table(conn):
    sql = '''
    CREATE TABLE IF NOT EXISTS data_sci.photos (
	id    integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	name   TEXT,
	mode   TEXT,
	x_size integer,
	y_size integer,
	photo_data bytea
    );
    '''
    cur = conn.cursor()
    cur.execute(sql)
    print(cur.statusmessage)
    cur.close()
    conn.commit()

def create_thumbnail_image(img_file):
    try:
        img = Image.open(img_file)
        img = img.rotate(-90) # Need to rotate photo to get it vertical
        size = 128,128
        img.thumbnail(size) # In place transformation


    except FileNotFoundError:
        img = None

    finally:
        return img

def insert_into_photo_db(conn, img, photo_name):
    img_bytes = img.tobytes()
    mode = img.mode
    t_size = img.size

    cur = conn.cursor()

    sql = '''insert into data_sci.photos
    (name, mode, x_size, y_size, photo_data) 
    values (%s, %s, %s, %s, %s);'''

    cur.execute(sql, (photo_name, mode, t_size[0], t_size[1], psycopg2.Binary(img_bytes)))
    print(cur.statusmessage)
    cur.close()
    conn.commit()


def get_photo_from_db(conn, photo_name):
    cur = conn.cursor()
    cur.execute("SELECT * FROM data_sci.photos where name = %s;", (photo_name,))
    result_tup = cur.fetchone()
    im_size = result_tup[3],result_tup[4]

    img2 = Image.frombytes(mode=result_tup[2], size=im_size, data=result_tup[5].tobytes())

    cur.close()

    return img2
    


if __name__ == '__main__':
    try:
        # Connect to db
        conn = db_conn()

        # Create photos table in data_sci schema
        create_photos_table(conn)

        # Load local image file and create thumbnail
        test_image_file = r'E:\Pictures\Passport raw.JPG'
        thumb = create_thumbnail_image(test_image_file)
        
        # Insert thumbnail into photos db
        photo_name = Path(test_image_file).stem
        insert_into_photo_db(conn, thumb, photo_name)

        # Close source image
        thumb.close()

        # Query photos db and show thumbnail
        img2 = get_photo_from_db(conn, photo_name)
        img2.show()

        # Close thumbnail image
        img2.close()

    except (Exception) as error:
        print(error)

    finally:
        if conn is not None:
            conn.close()
            print('Database connection closed.')

